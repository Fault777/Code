import unittest
import os
from main import write_to_file, read_from_file, update_file

class TestFileStorage(unittest.TestCase):
 
    def setUp(self):
        self.filename = "test_storage.txt"

    def tearDown(self):
        if os.path.exists(self.filename):
            os.remove(self.filename)

    def test_write_to_file(self):
        data = "Тестовые данные"
        write_to_file(self.filename, data)
        self.assertTrue(os.path.exists(self.filename), "Файл должен быть создан")
        
        with open(self.filename, 'r') as file:
            content = file.read()
        self.assertEqual(content, data, "Данные в файле должны совпадать с введёнными")

    def test_read_from_file(self):
        data = "Тестовые данные для чтения"
        write_to_file(self.filename, data)
        
        content = read_from_file(self.filename)
        self.assertEqual(content, data, "Прочитанные данные должны совпадать с содержимым файла")

    def test_update_file(self):
        data = "Первая строка"
        new_data = "Вторая строка"
        write_to_file(self.filename, data)
        
        update_file(self.filename, new_data)
        
        with open(self.filename, 'r') as file:
            content = file.read()
        
        expected_content = f"{data}\n{new_data}"
        self.assertEqual(content, expected_content, "Данные в файле должны обновляться корректно")

    def test_read_non_existent_file(self):
        content = read_from_file(self.filename)
        self.assertEqual(content, f"Файл {self.filename} не существует.", "Должно возвращаться сообщение об отсутствии файла")

if __name__ == "__main__":
    unittest.main()
